import os
import json
import requests
from datetime import datetime

def load_api_list(path):
        with open(path, "r", encoding="utf-8") as f:
            return json.load(f)

def select_api(api_list):
    print("\nüì° ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å API ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:")
    for idx, api in enumerate(api_list, 1):
        print(f"{idx}. {api['name']} (expire date: {api['expire date']})")
    print("‡∏û‡∏¥‡∏°‡∏û‡πå 'back' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å")

    while True:
        choice = input("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç: ").strip().lower()
        if choice == "back":
            return "back"
        if choice.isdigit() and 1 <= int(choice) <= len(api_list):
            return api_list[int(choice) - 1]
        print("‚ùå ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")

def list_subfolders(directory):
    return [f for f in os.listdir(directory)
            if os.path.isdir(os.path.join(directory, f)) and not f.startswith("__")]


def list_json_files(directory):
    return [f for f in os.listdir(directory) if f.endswith(".json")]

def select_from_list(items, prompt="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å:", allow_back=True, allow_exit=True):
        for idx, item in enumerate(items, 1):
            print(f"{idx}. {item}")
        if allow_back:
            print("‡∏û‡∏¥‡∏°‡∏û‡πå 'back' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö")
        if allow_exit:
            print("‡∏û‡∏¥‡∏°‡∏û‡πå 'exit' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏ö‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°")

        while True:
            choice = input(prompt).strip().lower()
            if allow_back and choice == "back":
                return "back"
            if allow_exit and choice == "exit":
                return "exit"
            if choice.isdigit():
                index = int(choice) - 1
                if 0 <= index < len(items):
                    return items[index]
            print("‚ùå ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
    
def select_json_files(json_files):
    print("\nüìÑ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå JSON ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á:")
    for idx, file in enumerate(json_files, 1):
        print(f"{idx}. {file}")
    print("‡∏û‡∏¥‡∏°‡∏û‡πå 'back' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö | ‡∏û‡∏¥‡∏°‡∏û‡πå 'all' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")

    while True:
        choice = input("‡πÉ‡∏™‡πà‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç: ").strip().lower()
        if choice == "back":
            return "back"
        if choice == "all":
            return json_files
        try:
            indices = parse_range_selection(choice, len(json_files))
            selected = [json_files[i] for i in indices]
            if selected:
                return selected
        except:
            pass
        print("‚ùå ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")

def parse_range_selection(selection_str, max_index):
    result = set()
    parts = selection_str.split(',')
    for part in parts:
        part = part.strip()
        if '-' in part:
            try:
                start, end = map(int, part.split('-'))
                if 1 <= start <= end <= max_index:
                    result.update(range(start - 1, end))
            except:
                continue
        elif part.isdigit():
            idx = int(part) - 1
            if 0 <= idx < max_index:
                result.add(idx)
    return sorted(result)

def run_to_tag():
    script_dir = os.path.dirname(os.path.abspath(__file__))
    base_dir = os.path.abspath(os.path.join(script_dir, ".."))
    api_file_path = os.path.join(script_dir, "api_write.txt")

    try:
        while True:
            api_list = load_api_list(api_file_path)
            selected_api = select_api(api_list)
            if selected_api == "back":
                return "back"

            print(f"\nüöÄ ‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: {selected_api['name']}")
            print(f"URL: {selected_api['url']}")

            headers = {
                "Content-Type": "application/json",
                "Authorization": selected_api["token"]
            }

            while True:
                print("\nüìÅ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå JSON:")
                folders = list_subfolders(base_dir)
                if not folders:
                    print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏¢‡πà‡∏≠‡∏¢‡πÉ‡∏î ‡πÜ")
                    break

                selected_folder = select_from_list(folders, prompt="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç: ")
                if selected_folder == "exit":
                    print("üëã ‡∏à‡∏ö‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°")
                    return
                if selected_folder == "back":
                    break

                folder_path = os.path.join(base_dir, selected_folder)

                while True:
                    json_files = list_json_files(folder_path)
                    if not json_files:
                        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå .json ‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ")
                        break

                    selected_files = select_json_files(json_files)
                    if selected_files == "back":
                        break
                    if not selected_files:
                        continue

                    print("\nüì§ ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏∞‡∏™‡πà‡∏á:")
                    for f in selected_files:
                        print(f"- {f}")
                    print(f"\nüìä ‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {len(selected_files)} ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ß‡πâ")
                    confirm = input(f"‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏õ‡∏¢‡∏±‡∏á {selected_api['name']}? (y/n): ").strip().lower()
                    if confirm != "y":
                        print("‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á")
                        continue

                    # prepare log file
                    log_dir = os.path.join(base_dir, "log_to_tag")
                    os.makedirs(log_dir, exist_ok=True)
                    log_filename = f"log-{datetime.now().strftime('%Y-%m-%d-%H-%M-%S')}.txt"
                    log_path = os.path.join(log_dir, log_filename)
                    log_lines = []

                    success_count = 0
                    fail_count = 0

                    for file_name in selected_files:
                        try:
                            file_path = os.path.join(folder_path, file_name)
                            with open(file_path, "r", encoding="utf-8") as f:
                                data = json.load(f)

                            response = requests.post(selected_api["url"], headers=headers, json=data)

                            if response.status_code == 200:
                                msg = f"‚úÖ ‡∏™‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {file_name}"
                                print(msg)
                                log_lines.append(msg)
                                success_count += 1
                            else:
                                try:
                                    error_detail = response.json()
                                    error_message = error_detail.get("error") or error_detail.get("message") or str(error_detail)
                                except Exception:
                                    error_message = response.text

                                if response.status_code == 400:
                                    msg = f"‚ö†Ô∏è ‡∏™‡πà‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {file_name} ({response.status_code}) {error_message} üí°‡∏≠‡∏≤‡∏à‡πÄ‡∏Å‡∏¥‡∏î‡∏à‡∏≤‡∏Å: ‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠ tag ‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß"
                                elif response.status_code == 500:
                                    msg = f"‚ö†Ô∏è ‡∏™‡πà‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {file_name} ({response.status_code}) {error_message} üí°‡∏≠‡∏≤‡∏à‡πÄ‡∏Å‡∏¥‡∏î‡∏à‡∏≤‡∏Å: ‡∏°‡∏µ col ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≥‡∏´‡πâ‡∏≤‡∏°‡πÉ‡∏ä‡πâ ‡∏´‡∏£‡∏∑‡∏≠ data type ‡∏ú‡∏¥‡∏î"
                                else:
                                    msg = f"‚ö†Ô∏è ‡∏™‡πà‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {file_name} ({response.status_code}) {error_message}"
                                print(msg)
                                log_lines.append(msg)
                                fail_count += 1

                        except Exception as e:
                            msg = f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Å‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå {file_name}: {e}"
                            print(msg)
                            log_lines.append(msg)
                            fail_count += 1

                    total = success_count + fail_count
                    print("\nüìà ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á:")
                    print(f" - ‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {success_count} ‡πÑ‡∏ü‡∏•‡πå")
                    print(f" - ‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {fail_count} ‡πÑ‡∏ü‡∏•‡πå")
                    if total > 0:
                        success_percent = (success_count / total) * 100
                        fail_percent = (fail_count / total) * 100
                        print(f" - üìä ‡∏Ñ‡∏¥‡∏î‡πÄ‡∏õ‡πá‡∏ô: {success_percent:.2f}% ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à | {fail_percent:.2f}% ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")

                    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å log
                    with open(log_path, "w", encoding="utf-8") as log_file:
                        for line in log_lines:
                            log_file.write(line + "\n")

                    print(f"\nüìù Log ‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ‡∏ó‡∏µ‡πà: {log_path}")

    except Exception as e:
        print(f"\n‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏´‡∏•‡∏±‡∏Å: {e}")